

export const NewUserSignUp = ({ title }) => {
  const [user,loading,error] = useAuthState(auth);
  const role = "User";
  const initialValues = {
    email: "",
    name: "",
    portfolioMin: "",
    portfolioMax: "",
  };
  const [formErrors, setFormErrors] = useState({});
  const [formValue, setFormValue] = useState(initialValues);
  const [isSubmit, setIsSubmit] = useState(false);
  const formRef = useRef();
  const handleChange = async(e) => {
    
    const { name, value } = e.target;
    setFormValue({ ...formValue, [e.target.name]: e.target.value });
  };
  const onSubmit = async (e) => {
    e.preventDefault();
    setFormErrors(validate(formValue));
    setIsSubmit(true);
    const collRef = collection("users");
    if(user){
      const uid = user.uid;
    
    const docData = { ...formValue, uid, role, created_at: Timestamp() };
  
    try {
      await addDoc(collRef,...docData).then((doc) => {
        localStorage.setItem("UserData", JSON.stringify(docData));
        console.log(doc);
      });
    } catch (err) {
      console.log(err);
    }}
  };
  const validate = (values) => {
    const errors = {};
    const regex = /^[^\s@]+@[^\s@]+.[^\s@]{2,}$/i;
    if (!values.username) {
      errors.username = "Username is required!";
    }
     if (!values.email) {
      errors.email = "Email is required!";
    } else if (!regex.test(values.email)) {
      errors.email = "This is not a valid email format!";
    }
    if (!values.portfolioMin) {
      errors.portfolioMin = "Portfolio Min is required!";
    }
    if (!values.portfolioMax) {
      errors.portfolioMax = "Portfolio Max is required!";
    }
    return errors;
  }
  useEffect(() => {
    console.log(formErrors);
    if (Object.keys(formErrors).length === 0 && isSubmit) {
      console.log(formValue);
    }
    if(user){
      const uid = user.uid;
    }
    
  }, [user,formErrors,formValue,isSubmit] );
 
  return (
    <React.Fragment>
      <Form
        ref={formRef}
        onSubmit={onSubmit}
        formValue={formValue}
        formErrors={formErrors}
      >
      {title && <h1>{title}</h1>}
        <Field name="email" label="Email" onChange={(e)=> setFormValue(...formValue,e.target.value)} />
        <Field name="userName" label="User Name" onChange={(e)=> setFormValue(...formValue,e.target.value)} />
        <Field name="portfolioMin" label="Portfolio Min" onChange={(e)=> setFormValue(...formValue,e.target.value)} />
        <Field name="portfolioMax" label="Portfolio Max" onChange={(e)=> setFormValue(...formValue,e.target.value)} />
        <Button appearance="primary" type="submit">
          Submit
        </Button>
      </Form>
    </React.Fragment>
  );
};



